""" Друге завдання:
    Щоб виграти головний приз лотереї, необхідний збіг кількох номерів на лотерейному квитку з числами, що випали випадковим 
    чином і в певному діапазоні під час чергового тиражу. Наприклад, необхідно вгадати шість чисел від 1 до 49 чи п'ять чисел
    від 1 до 36 тощо.
    Вам необхідно написати функцію get_numbers_ticket(min, max, quantity), яка допоможе генерувати набір унікальних випадкових
    чисел для таких лотерей.
    Вона буде повертати випадковий набір чисел у межах заданих параметрів, причому всі випадкові числа в наборі повинні бути 
    унікальні.

Вимоги до завдання:
1. Параметри функції:
    - min - мінімальне можливе число у наборі (не менше 1).
    - max - максимальне можливе число у наборі (не більше 1000).
    - quantity - кількість чисел, які потрібно вибрати (значення між min і max).
2. Функція генерує вказану кількість унікальних чисел у заданому діапазоні.
3. Функція повертає список випадково вибраних, відсортованих чисел. Числа в наборі не повинні повторюватися. Якщо параметри
не відповідають заданим обмеженням, функція повертає пустий список.

Рекомендації для виконання:
1. Переконайтеся, що вхідні параметри відповідають заданим обмеженням.
2. Використовуйте модуль random для генерації випадкових чисел.
3. Використовуйте множину або інший механізм для забезпечення унікальності чисел.
4. Пам'ятайте, що функція get_numbers_ticket повертає відсортований список унікальних чисел.

Критерії оцінювання:
1. Валідність вхідних даних: функція повинна перевіряти коректність параметрів.
2. Унікальність результату: усі числа у видачі повинні бути унікальними.
3. Відповідність вимогам: результат має бути у вигляді відсортованого списку.
4. Читабельність коду: код має бути чистим і добре документованим.
"""
from random import randint # Імпортуємо функцію, для генерування числа

def get_numbers_ticket(min: int, max: int, quantity: int) -> list:
    """
    Генерує набір унікальних випадкових чисел для лотереї.
    
    :param min: Мінімальне можливе число у наборі (не менше 1).
    :param max: Максимальне можливе число у наборі (не більше 1000).
    :param quantity: Кількість чисел, які потрібно вибрати (значення між min і max).
    :return: Список випадково вибраних, відсортованих чисел або порожній список при некоректних параметрах.
    """
    # Перевірка коректності вхідних параметрів
    if not (1 <= min < max <= 1000) or not (1 <= quantity <= (max - min + 1)): 
        print("Некоректні параметри: мінімум, максимум та кількість обраних чисел повинні відповідати обмеженням.")
        return []
    # Cтворення порожньої множини для зберігання чисел
    numbers = set()
    # Використовуємо множину для унікальності чисел
    # Цикл для генерації унікальних випадкових чисел
    while len(numbers) < quantity: # Поки кількість згенерованих чисел менша за запитувану
        numbers.add(randint(min, max))  # Генеруємо випадкове число в діапазоні від min до max
        # print(f"Згенеровано число: {numbers}")  # Виводимо згенероване число
    # Перетворення множини в список для повернення
    numbers_list = list(numbers)  # Перетворення множини в список
    # Сортування списку унікальних чисел
    return sorted(numbers_list)  # Повертаємо відсортований список унікальних чисел

try:
    # Запит параметрів у користувача
    input_min = int(input("Введіть мінімальне ціле число (не менше 1): "))
    input_max = int(input("Введіть максимальне ціле число (не більше 1000): "))
    input_quantity = int(input("Введіть кількість чисел, які потрібно згенерувати: "))
    # Виклик функції для отримання набору чисел
    result = get_numbers_ticket(input_min, input_max, input_quantity)
    # Виведення результату, якщо він не порожній, тобто якщо введені цілі числа у межах заданих діапазонів 
    if result:
        print(f"Згенеровані числа: {result}")
    else:
        print("Не вдалося згенерувати числа через некоректні параметри.")
# Обробка винятків, якщо введені параметри не є цілими числами
except ValueError as e: 
    print("Помилка: введіть коректні цілі числа.", e)