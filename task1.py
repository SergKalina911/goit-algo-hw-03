""" Перше завдання:
Створіть функцію get_days_from_today(date), яка розраховує кількість днів між заданою датою і поточною датою.
Вимоги до завдання:
1. Функція приймає один параметр: date — рядок, що представляє дату у форматі 'РРРР-ММ-ДД' (наприклад, '2020-10-09').
2. Функція повертає ціле число, яке вказує на кількість днів від заданої дати до поточної. Якщо задана дата пізніша за
    поточну, результат має бути від'ємним.
3. У розрахунках необхідно враховувати лише дні, ігноруючи час (години, хвилини, секунди).
4. Для роботи з датами слід використовувати модуль datetime Python.
Рекомендації для виконання:
- Імпортуйте модуль datetime.
- Перетворіть рядок дати у форматі 'РРРР-ММ-ДД' у об'єкт datetime.
- Отримайте поточну дату, використовуючи datetime.today().
- Розрахуйте різницю між поточною датою та заданою датою.
- Поверніть різницю у днях як ціле число.
Критерії оцінювання:
1. Коректність роботи функції: функція повинна точно обраховувати кількість днів між датами.
2. Обробка винятків: функція має впоратися з неправильним форматом вхідних даних.
3. Читабельність коду: код повинен бути чистим і добре документованим.
"""
from datetime import datetime
def get_days_from_today(input_date: str) -> int:
    """
    Розраховує кількість днів між заданою датою і поточною датою.
    :param date: Дата у форматі 'РРРР-ММ-ДД'.
    :return: Кількість днів від заданої дати до поточної. Від'ємне значення, якщо дата пізніша за поточну.
    """
    try:
        # Перетворення рядка дати у об'єкт datetime
        input_date_datatime = datetime.strptime(input_date, '%Y-%m-%d')
    # Обробка винятку, якщо формат дати неправильний
    except ValueError:
        # Отримання повідомлення про помилку і виведення його користувачу
        print("Неправильний формат дати. Використовуйте 'РРРР-ММ-ДД'.")
        return
    # Отримання поточної дати
    today = datetime.today()
    # Розрахунок різниці у днях
    delta = (today - input_date_datatime).days
    return delta

# Створення циклу для багаторазового запиту дати у користувача
while True:
    # Запит дати у користувача
    input_date = input("Введіть дату у форматі 'РРРР-ММ-ДД' (натисніть 'Enter' без введення дати для завершення): ")
    # Перевірка на вихід з циклу
    if input_date==input_date.strip() == '':
        print("Завершення програми.")
        break
    try:
        # виклик функції для розрахунку кількості днів від введеної дати до сьогодні
        days_difference = get_days_from_today(input_date)
        print(f"Кількість днів від {input_date} до сьогодні: {days_difference}")
    # Обробка винятку, якщо дата введена неправильно
    except ValueError as e:
        # Виведення повідомлення про помилку
        print("Помилка:", e)
# Завершення циклу, якщо користувач натиснув Enter без введення дати
# Завершення програми



